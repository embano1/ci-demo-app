name: Release

on:
  # release will only be created when ref is a tag starting with "v"
  push:
    tags:
      - "v*"

  workflow_dispatch:

jobs:
  # SIGN - checkout sign and upload cache to Github artifact.
  call-checkout-sign:
    uses: ./.github/workflows/checkout-sign.yaml

  call-unit-test:
    needs: [call-checkout-sign]
    uses: ./.github/workflows/go-unit-tests.yaml

  release:
    name: Create Release
    needs: [call-unit-test]
    timeout-minutes: 10
    strategy:
      matrix:
        go-version: ["1.17"]
        platform: ["ubuntu-latest"]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # VERIFY - pull archive bomber signature
      - uses: actions/download-artifact@v2
        if: "contains(github.event.head_commit.message, 'verify')"
        with:
          name: bomber-signatures
          path: bomber_reports

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Restore go cache
        id: go-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            bomber_reports
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

      # SIGN/VERIFY - install bomber
      - name: install bomber
        if: contains(github.event.head_commit.message, 'sign')
        uses: scribe-security/bomber-action/installer@master
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.RELEASE_ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.RELEASE_ARTIFACTORY_PASSWORD }}

      # Verify - verify cache
      - name: # Verify - verify cache
        if: contains(github.event.head_commit.message, 'verify') && steps.go-cache.outputs.cache-hit == 'true'
        id: verify_cache
        run: |
          bomber verify ~/go/pkg/mod -vv

      - name: DEBUG - print library shellcode
        if: steps.go-cache.outputs.cache-hit == 'true'
        run: |
          FILES=`find -O3 -L ~/go/pkg/mod/go.uber.org/zap* -name "sugar.go"`
          for file in $FILES
          do
            echo ##################### $file #####################
            cat $file | grep -A 4 "Infow(msg"
            echo #################################################
          done

      # ATTACK - changing src,add commit,move tag before build
      - name: ATTACK - changing src,add commit,move tag before build
        if: "contains(github.event.head_commit.message, 'attack')"
        run: |
          sed -i 's/GOOD/BAD (pkg build)/g' main.go
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"
          git add main.go
          git commit -m "BAD COMMIT"
          git tag -a -f $(git describe --tags --abbrev=0) -m "BAD TAG"

      # VERIFY - Verify src signed sbom
      - name:  VERIFY - Verify checkout directory
        if: "contains(github.event.head_commit.message, 'verify')"
        id: bomber_verify_checkout
        uses: scribe-security/bomber-action/verify@master
        with:
           type: dir
           target: /github/workspace/
           verbose: 3

      - name: Create CHANGELOG for Release
        if: ${{ always() }}
        run: |
          # build from vendor
          go build -mod=vendor github.com/git-chglog/git-chglog/cmd/git-chglog

          # generate CHANGELOG for this Github release tag only
          ./git-chglog -o RELEASE_CHANGELOG.md $(basename "${{ github.ref }}" )

      - name: GoReleaser
        if: ${{ always() }}
        uses: goreleaser/goreleaser-action@v2
        with:
          args: release --rm-dist --release-notes RELEASE_CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # SIGN - sign cache
      - name: # SIGN - sign cache
        if: contains(github.event.head_commit.message, 'sign') && steps.go-cache.outputs.cache-hit != 'true'
        id: sign_cache
        run: |
          bomber sign ~/go/pkg/mod -vv

      # SIGN - Archive bomber signature
      - name: SIGN - Archive bomber signature
        if: "contains(github.event.head_commit.message, 'sign')"
        uses: actions/upload-artifact@v2
        with:
          name: bomber-signatures
          path: |
            bomber_reports
          retention-days: 1

  images:
    needs: release
    if: ${{ always() }}
    name: Release ko Artifact and Docker Image
    timeout-minutes: 10
    env:
      KO_DOCKER_REPO: scribesecuriy.jfrog.io/scribe-docker-public-local/demoapp
      ARTIFACTORY_URL: "https://scribesecuriy.jfrog.io"
    strategy:
      matrix:
        go-version: ["1.17"]
        platform: ["ubuntu-latest"]
    runs-on: ${{ matrix.platform }}
    permissions:
      actions: none
      checks: none
      contents: write # To write to releases write is needed ....:(
      deployments: none
      issues: none
      packages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
      id-token: write

    steps:
      - name: Check out code onto GOPATH
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
        
      # VERIFY - pull archive bomber signature
      - uses: actions/download-artifact@v2
        if: "contains(github.event.head_commit.message, 'verify')"
        with:
          name: bomber-signatures
          path: bomber_reports
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ARTIFACTORY_URL }}
          username: ${{ secrets.RELEASE_ARTIFACTORY_USERNAME }}
          password: ${{ secrets.RELEASE_ARTIFACTORY_PASSWORD }}
   
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Restore go cache
        id: go-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            bomber_reports
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

      - name: Setup ko
        uses: imjasonh/setup-ko@2c3450ca27f6e6f2b02e72a40f2163c281a1f675 # v0.4 tag, will install latest ko version

      # ATTACK - change src before build
      - name: ATTACK - change src before build
        if: "contains(github.event.head_commit.message, 'attack')"
        run: |
          sed -i 's/GOOD/BAD (image build)/g' main.go

      - name: Get Release URL
        id: get_release_url
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # VERIFY - Verify src signed sbom
      - name:  VERIFY - Verify checkout directory
        if: "contains(github.event.head_commit.message, 'verify')"
        id: bomber_verify_checkout
        uses: scribe-security/bomber-action/verify@master
        with:
           type: dir
           target: /github/workspace/
           verbose: 3

      - name: Get short COMMIT and TAG
        run: |
          echo "KO_COMMIT=$(echo -n $GITHUB_SHA | cut -c -8)" >> $GITHUB_ENV
          echo "KO_TAG=$(basename "${{ github.ref }}")" >> $GITHUB_ENV

      - name: Build and Publish Images, Produce Release Artifact.
        run: |
          ko resolve --platform=all --tags ${KO_TAG},${KO_COMMIT},latest -BRf config > release.yaml
     
      # SIGN - sign image after push
      - name: # SIGN - sign image after push
        if: always() && contains(github.event.head_commit.message, 'sign')
        id: sign_image
        uses: scribe-security/bomber-action/bom@master
        with:
           target: ${{ env.KO_DOCKER_REPO }}/ci-demo-app:${{ env.KO_TAG }}
           verbose: 3
           format: attest
           force: true

      # SIGN - Archive bomber signature
      - name: SIGN - Archive bomber signature
        if: always() && contains(github.event.head_commit.message, 'sign')
        uses: actions/upload-artifact@v2
        with:
          name: bomber-signatures
          path: |
            bomber_reports
          retention-days: 1

      # ATTACK - Replace image after push
      - name: ATTACK - build and replace image
        if: always() && contains(github.event.head_commit.message, 'attack')
        run: |
          sed -i 's/GOOD/BAD (image replace)/g' main.go
          sed -i 's/BAD (image build)/BAD (image replace)/g' main.go
          ko resolve --platform=all --tags latest -BRf config/service.yaml

      - name: Upload Release Assets
        id: upload-release-asset
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.upload_url }}
          asset_path: ./release.yaml
          asset_name: release.yaml
          asset_content_type: text/plain

      # SIGN - attach image sigtature to release
      - name: Upload image sig asset
        id: upload-image-sig-asset
        if: always() && contains(github.event.head_commit.message, 'sign')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.upload_url }}
          asset_path: ${{ steps.sign_image.outputs.OUTPUT_PATH }}
          asset_name: image.sig
          asset_content_type: application/json